/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz;

import EDD.Almacen;
import EDD.Grafo;
import EDD.Product;
import EDD.Funciones;
import EDD.Nodo;
import EDD.ProductList;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.View;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.swingViewer.ViewPanel;
import org.graphstream.ui.view.Viewer;


/**
 *
 * @author Tomas
 */
public class Interfaz extends javax.swing.JFrame {
    private String path;
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
//       Grafo grafo1 = Global.getGrafo();
//       Almacen origin1 = new Almacen("hola");
//       Almacen origin2 = new Almacen("chao");
//       grafo1.newNode(origin1);
//       grafo1.newNode(origin2);
//        grafo1.newArista(origin1, origin2,  2);
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.path=null;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        load_txt_button = new javax.swing.JButton();
        Boton_pedidos = new javax.swing.JButton();
        Gestion_stock = new javax.swing.JButton();
        almacen = new javax.swing.JButton();
        ruta = new javax.swing.JButton();
        save_txt_button = new javax.swing.JButton();
        Mostrar_grafo = new javax.swing.JButton();
        reporte = new javax.swing.JButton();
        Parent = new javax.swing.JPanel();
        Inicio = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        Pedidos = new javax.swing.JPanel();
        box = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Mostrar_Productos = new javax.swing.JTextArea();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        Pedido_input = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        Pedir = new javax.swing.JButton();
        Gestion_Stock = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        almacen_input2 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        object_input = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        quantity_input = new javax.swing.JTextField();
        Añadir_stock = new javax.swing.JButton();
        Almacen = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        almacen_input = new javax.swing.JTextField();
        insertAlmacen_button = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        salida_input = new javax.swing.JTextField();
        entrada_input = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        weight_input = new javax.swing.JTextField();
        weight_input2 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Route = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        origin_input3 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        destiny_input3 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        weight_input3 = new javax.swing.JTextField();
        insertarRuta = new javax.swing.JButton();
        ShowGrafo = new javax.swing.JPanel();
        BFS_DFS = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pantalla_BFS_DFS = new javax.swing.JTextArea();
        BFS = new javax.swing.JButton();
        DFS = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        load_txt_button.setText("Cargar Txt");
        load_txt_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_txt_buttonActionPerformed(evt);
            }
        });
        jPanel1.add(load_txt_button, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        Boton_pedidos.setText("Pedidos");
        Boton_pedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_pedidosActionPerformed(evt);
            }
        });
        jPanel1.add(Boton_pedidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        Gestion_stock.setText("Gestion Stock");
        Gestion_stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Gestion_stockActionPerformed(evt);
            }
        });
        jPanel1.add(Gestion_stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        almacen.setText("Añadir Almacén");
        almacen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                almacenActionPerformed(evt);
            }
        });
        jPanel1.add(almacen, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 120, -1));

        ruta.setText("Añadir Ruta");
        ruta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rutaActionPerformed(evt);
            }
        });
        jPanel1.add(ruta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 110, -1));

        save_txt_button.setText("Guardar en Txt");
        save_txt_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_txt_buttonActionPerformed(evt);
            }
        });
        jPanel1.add(save_txt_button, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        Mostrar_grafo.setText("Mostrar grafo");
        Mostrar_grafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Mostrar_grafoActionPerformed(evt);
            }
        });
        jPanel1.add(Mostrar_grafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        reporte.setText("Reporte");
        reporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reporteActionPerformed(evt);
            }
        });
        jPanel1.add(reporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 100, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 130, 510));

        Parent.setBackground(new java.awt.Color(255, 255, 255));
        Parent.setLayout(new java.awt.CardLayout());

        Inicio.setBackground(new java.awt.Color(255, 255, 255));
        Inicio.setForeground(new java.awt.Color(255, 255, 255));
        Inicio.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel26.setText("Bienvenido");
        Inicio.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, -1, -1));

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel27.setText("Presiona el boton de la accion que deseas realizar");
        Inicio.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, -1, -1));

        Parent.add(Inicio, "card8");

        Pedidos.setBackground(new java.awt.Color(255, 255, 255));
        Pedidos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        box.setEditable(true);
        box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxActionPerformed(evt);
            }
        });
        Pedidos.add(box, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 140, 90, 30));

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel25.setText("Realizar Pedido");
        Pedidos.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, -1, -1));

        Mostrar_Productos.setEditable(false);
        Mostrar_Productos.setColumns(20);
        Mostrar_Productos.setRows(5);
        jScrollPane3.setViewportView(Mostrar_Productos);

        Pedidos.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, 480, 210));

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel28.setText("Productos disponibles");
        Pedidos.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, -1, -1));

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel29.setText("Seleccione el almacen desde el cual desea solicitar el pedido");
        Pedidos.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        Pedido_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pedido_inputActionPerformed(evt);
            }
        });
        Pedidos.add(Pedido_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 490, 30));

        jLabel31.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel31.setText("Escriba su pedido de la siguiente manera:  producto,cantidad/producto,cantidad......");
        Pedidos.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jLabel33.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel33.setText("Ejemplo: Pantalla,3/Microfono,5");
        Pedidos.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        Pedir.setText("Realizar Pedido");
        Pedir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PedirActionPerformed(evt);
            }
        });
        Pedidos.add(Pedir, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 180, 170, 30));

        Parent.add(Pedidos, "card2");

        Gestion_Stock.setBackground(new java.awt.Color(255, 255, 255));
        Gestion_Stock.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setText("Gestión de Stock de los Almacenes");
        Gestion_Stock.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, -1));

        jLabel9.setText("Aquí puede gestionar el Stock del almacén de su preferencia, introduzca el nombre del almacén al que quiere");
        Gestion_Stock.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jLabel10.setText("gestionarle el Stock, introduzca el nombre del producto a añadir, su cantidad, y presione el botón para");
        Gestion_Stock.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jLabel11.setText("guardar los datos hechos.");
        Gestion_Stock.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        jLabel12.setText("Introduzca el nombre del Almacén al que se le va a gestionar el stock:");
        Gestion_Stock.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));
        Gestion_Stock.add(almacen_input2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 570, -1));

        jLabel13.setText("Introduzca el nombre del Objeto que se va a introducir en el Stock del almacén:");
        Gestion_Stock.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));
        Gestion_Stock.add(object_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 570, -1));

        jLabel14.setText("Introduzca la cantidad del objeto que se va a introducir en el Stock del almacén:");
        Gestion_Stock.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));
        Gestion_Stock.add(quantity_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 570, -1));

        Añadir_stock.setText("Añadir Objeto al Stock del Almacén");
        Añadir_stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Añadir_stockActionPerformed(evt);
            }
        });
        Gestion_Stock.add(Añadir_stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 320, -1, -1));

        Parent.add(Gestion_Stock, "card4");

        Almacen.setBackground(new java.awt.Color(255, 255, 255));
        Almacen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Gestión de Almacenes");
        Almacen.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, -1));

        jLabel2.setText("(no puede contener caracteres numéricos y debe ser de una letra):");
        Almacen.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        almacen_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                almacen_inputActionPerformed(evt);
            }
        });
        Almacen.add(almacen_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 550, 40));

        insertAlmacen_button.setText("Añadir Almacén");
        insertAlmacen_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertAlmacen_buttonActionPerformed(evt);
            }
        });
        Almacen.add(insertAlmacen_button, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 460, -1, -1));

        jLabel3.setText("Añadir Almacenes:");
        Almacen.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        jLabel4.setText("Añadir Rutas de Entrada:");
        Almacen.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 250, -1));

        jLabel5.setText("Introduzca el almacen entrada tomando como destino el nuevo almacen:");
        Almacen.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, -1, -1));
        Almacen.add(salida_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 550, -1));
        Almacen.add(entrada_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 550, -1));

        jLabel7.setText("Introduzca la distancia entre los dos almacenes");
        Almacen.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, -1, -1));
        Almacen.add(weight_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 550, -1));
        Almacen.add(weight_input2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 550, -1));

        jLabel15.setText("Añadir Rutas de Salida:");
        Almacen.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 250, -1));

        jLabel16.setText("Introduzca el almacén destino tomando como origen el nuevo almacen:");
        Almacen.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        jLabel17.setText("Introduzca la distancia entre los dos almacenes");
        Almacen.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        jLabel6.setText("Introduzca el nombre del almacen que desea añadir :");
        Almacen.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        Parent.add(Almacen, "card3");

        Route.setBackground(new java.awt.Color(255, 255, 255));
        Route.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setText("Gestión de Rutas");
        Route.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, -1));

        jLabel19.setText("Añadir Rutas:");
        Route.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, -1));

        jLabel20.setText("Introduzca el nombre del almacen de la origen de la ruta:");
        Route.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, -1, -1));
        Route.add(origin_input3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 550, -1));

        jLabel21.setText("Introduzca el nombre del almacen que será el destino de la ruta:");
        Route.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, -1));
        Route.add(destiny_input3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 550, -1));

        jLabel22.setText("Introduzca la distancia entre los dos almacenes");
        Route.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, -1, -1));
        Route.add(weight_input3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 550, -1));

        insertarRuta.setText("Añadir Ruta");
        insertarRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertarRutaActionPerformed(evt);
            }
        });
        Route.add(insertarRuta, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 440, -1, -1));

        Parent.add(Route, "card4");

        ShowGrafo.setBackground(new java.awt.Color(255, 255, 255));
        ShowGrafo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Parent.add(ShowGrafo, "card6");

        pantalla_BFS_DFS.setEditable(false);
        pantalla_BFS_DFS.setColumns(20);
        pantalla_BFS_DFS.setRows(5);
        pantalla_BFS_DFS.setFocusable(false);
        jScrollPane2.setViewportView(pantalla_BFS_DFS);

        BFS.setText("Mostrar por recorrido BFS");
        BFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BFSActionPerformed(evt);
            }
        });

        DFS.setText("Mostrar por recorrido DFS");
        DFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DFSActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel24.setText("Reportes De Disponibilidad Por Almacenes");

        javax.swing.GroupLayout BFS_DFSLayout = new javax.swing.GroupLayout(BFS_DFS);
        BFS_DFS.setLayout(BFS_DFSLayout);
        BFS_DFSLayout.setHorizontalGroup(
            BFS_DFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BFS_DFSLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(BFS_DFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BFS_DFSLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(54, Short.MAX_VALUE))
                    .addGroup(BFS_DFSLayout.createSequentialGroup()
                        .addComponent(BFS, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DFS, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BFS_DFSLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );
        BFS_DFSLayout.setVerticalGroup(
            BFS_DFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BFS_DFSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(BFS_DFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BFS)
                    .addComponent(DFS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        Parent.add(BFS_DFS, "card7");

        getContentPane().add(Parent, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 610, 510));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Boton_pedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_pedidosActionPerformed
        Grafo grafo=Global.getGrafo();
        
        if (grafo.getFirst()==null) {
            JOptionPane.showMessageDialog(null, "Error!!! Primero debe cargar el txt");
        
        } else {
            box.removeAllItems();   
            
            Funciones funciones=new Funciones();
            
                String nombres=funciones.nombres_almacenes(grafo);

                String[] almacenes=nombres.split(",");

                for (int i = 0; i < almacenes.length; i++) {
                    box.addItem(almacenes[i]);
            
        }
    
         ProductList todosproductos=funciones.mostrar_disponible(grafo);
         String productos=todosproductos.mostrar();
        Mostrar_Productos.setText(productos);
        
        Parent.removeAll();
        Parent.add(Pedidos);
        Parent.repaint();
        Parent.revalidate();
        
        }
        
        
        
        
        
    }//GEN-LAST:event_Boton_pedidosActionPerformed


    private void load_txt_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_txt_buttonActionPerformed
        JFileChooser file = new JFileChooser();
        
         FileNameExtensionFilter filter = new FileNameExtensionFilter(".TXT","txt");
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        file.setFileFilter(filter);
        int selection=file.showOpenDialog(this);

        if (selection==JFileChooser.APPROVE_OPTION) {
            
            File archive=file.getSelectedFile();
            
            String path=archive.getAbsolutePath();
            setPath(path);
            
            if(!path.contains("txt")) {
            JOptionPane.showMessageDialog(null, "Por favor elija un archivo del tipo txt");
            }
            else{
            try {
                File archivo = new File (path); 
                FileReader fr = new FileReader(archivo); 
                BufferedReader br = new BufferedReader(fr); 
                 
                String cadena;
                String complete=""; 
      
                while ((cadena=br.readLine())!=null) { 

                    if(!cadena.isEmpty()&& !cadena.isBlank()) {
                        complete+=cadena+"\n";
                    }
                }
                
                fr.close();
                br.close();

                if(!"".equals(complete)) {
 
                    String[] info;
                    Grafo grafo = Global.getGrafo();
                    String [] todo= complete.split(";");
                    String[] almacenes;
                    String[] detalles;
                    String nombre[];
                    String letra;
                    Almacen alma;
                    String[] routes=complete.split("Rutas;");
                    String[] eachroute=routes[1].split("\n");
                    String[] routeinfo;

                    for (int i = 0; i < todo.length; i++) {
                        if (todo[i].contains(":")) {
                          almacenes=todo[i].split(":");
                          nombre=almacenes[0].split(" ");
                          letra=nombre[1];
                          alma=new Almacen(letra);
                          grafo.newNode(alma);

                            info=almacenes[1].split("\n");

                              for (int j = 0; j < info.length; j++) {
                               detalles=info[j].split(",");

                               if(detalles.length>1) {
                                  alma.getListaProductos().insertEnd(new Product(detalles[0],Integer.parseInt(detalles[1])));

                               }

                            }   
                        }
                    }

                    Almacen storage;
                    
                    for (int k = 0; k < eachroute.length; k++) {
                      
                        routeinfo=eachroute[k].split(",");
                        if(!routeinfo[0].isBlank()){
                        storage=grafo.getVertice(routeinfo[0]);
                         grafo.newArista(storage,grafo.getVertice(routeinfo[1]), Integer.parseInt(routeinfo[2]));
                         storage.getListaAdyacencia().newAdjacency(grafo.getVertice(routeinfo[1]), Integer.parseInt(routeinfo[2]));
                            
                        }  
                    }
                    JOptionPane.showMessageDialog(null, "TxT cargado exitosamente");
                }

              
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erorr!!!! Asegurate de haber cargado el archivo correcto");
            }
        }

      }
    }//GEN-LAST:event_load_txt_buttonActionPerformed

    private void Gestion_stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Gestion_stockActionPerformed
        Parent.removeAll();
        Parent.add(Gestion_Stock);
        Parent.repaint();
        Parent.revalidate();
    }//GEN-LAST:event_Gestion_stockActionPerformed

    private void Añadir_stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Añadir_stockActionPerformed
        Funciones funciones=new Funciones();
        Grafo grafo = Global.getGrafo();
        
        if(grafo.getFirst()!=null){
        if(almacen_input2.getText().isBlank() || object_input.getText().isBlank() || quantity_input.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Ingreso inválido, asegúrese de que todos los valores estén correctos");
            almacen_input2.setText("");
            object_input.setText("");
            quantity_input.setText("");
            
        }
        else if(!funciones.isalpha(object_input.getText())) {
            JOptionPane.showMessageDialog(null, "Ingrese un nombre de producto sin caracteres numericos");
            object_input.setText("");
        }
        else{
            try{

                Product producto = new Product(object_input.getText(), Integer.parseInt(quantity_input.getText()));
                
                Almacen almacen = grafo.getVertice(almacen_input2.getText());
                
                if(almacen == null){
                    throw new IllegalArgumentException("Uno de los almacene que introdujo no existe");
                }
                
                almacen.getListaProductos().insertEnd(producto);
                JOptionPane.showMessageDialog(null, "Producto agregado exitosamente");
                almacen_input2.setText("");
                object_input.setText("");
                quantity_input.setText("");
                
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Ingreso Inválido, asegúrese de que todos los valores estén correctos");
                almacen_input2.setText("");
                object_input.setText("");
                quantity_input.setText("");
            }
        }
        }
        else { JOptionPane.showMessageDialog(null, "No hay almacenes registrados, por favor lee el TXT"); }
    }//GEN-LAST:event_Añadir_stockActionPerformed

    private void almacenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_almacenActionPerformed
        Parent.removeAll();
        Parent.add(Almacen);
        Parent.repaint();
        Parent.revalidate();

    }//GEN-LAST:event_almacenActionPerformed

    private void rutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rutaActionPerformed
        Grafo grafo = Global.getGrafo();
        Parent.removeAll();
        Parent.add(Route);
        Parent.repaint();
        Parent.revalidate();
        System.out.println(grafo.grafoDijsktra("A","D").printRoute());
    }//GEN-LAST:event_rutaActionPerformed

    private void almacen_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_almacen_inputActionPerformed

    }//GEN-LAST:event_almacen_inputActionPerformed

    private void insertAlmacen_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertAlmacen_buttonActionPerformed
        String data ="";
        if (Global.getGrafo().getFirst()!=null){
            Funciones funciones=new Funciones();
            if(almacen_input.getText().isBlank()|| !funciones.isalpha(almacen_input.getText())){
                JOptionPane.showMessageDialog(null, "Ingreso Inválido, por favor ingrese el nombre del Almacén");
                almacen_input.setText("");
            }
            else if(almacen_input.getText().length()>1) {
                JOptionPane.showMessageDialog(null, "Ingreso Inválido, por favor ingrese el nombre del Almacén");
                almacen_input.setText("");
            }
            else{
                Grafo grafo = Global.getGrafo();
                data = almacen_input.getText();
                Almacen almacen = new Almacen(data);

                
            
                if(salida_input.getText().isBlank() || entrada_input.getText().isBlank() || weight_input.getText().isBlank()){
                    JOptionPane.showMessageDialog(null, "Ingreso inválido, asegúrese de que todos los valores estén correctos");
                        
                }
                else if (grafo.existVertice(almacen)){ JOptionPane.showMessageDialog(null, "El almacen ingresado ya existe");}
                
                else{
                    try{
                        grafo.newNode(almacen);
                        data = almacen_input.getText();
                        Grafo grafo1 = Global.getGrafo();
                        Grafo grafo2 = Global.getGrafo();
                        Almacen origin1 = new Almacen(data);
                        Almacen destiny1 = new Almacen(salida_input.getText());
                        int weight1 = Integer.parseInt(weight_input.getText());
                        Almacen origin2 = new Almacen(entrada_input.getText());
                        Almacen destiny2 = new Almacen(data);
                        int weight2 = Integer.parseInt(weight_input2.getText());

                        if(grafo2.existVertice(origin2) && grafo2.existVertice(destiny2) && grafo1.existVertice(origin1) && grafo1.existVertice(destiny1)){
                            grafo2.newArista(origin2, destiny2, weight2);
                            grafo1.newArista(origin1, destiny1, weight1);
                            JOptionPane.showMessageDialog(null, "registrados exitosamente CRACK");
                            almacen_input.setText("");
                            salida_input.setText("");
                            entrada_input.setText("");
                            weight_input.setText("");
                            weight_input2.setText("");

                        }else{
                            throw new IllegalArgumentException("Uno de los almacene que introdujo no existe");
                        }

                    }catch(Exception e){
                        JOptionPane.showMessageDialog(null, "Ingreso inválido de datos de la ruta, asegúrese de que todos los valores estén correctos");

                    }
            }
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "No hay almacenes registrados, por favor lee el TXT antes de registrar un almacen");
        }
    }//GEN-LAST:event_insertAlmacen_buttonActionPerformed

    private void insertarRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertarRutaActionPerformed
        if (Global.getGrafo().getFirst()!=null){

            if(origin_input3.getText().isBlank() || destiny_input3.getText().isBlank() || weight_input3.getText().isBlank()){
                JOptionPane.showMessageDialog(null, "Ingreso inválido, asegúrese de que todos los valores estén correctos");
                origin_input3.setText("");
                destiny_input3.setText("");
                weight_input.setText("");
            }else{
                try{
                    Grafo grafo = Global.getGrafo();
                    Almacen origin = new Almacen(origin_input3.getText());
                    Almacen destiny = new Almacen(destiny_input3.getText());
                    int weight = Integer.parseInt(weight_input3.getText());

                    if(grafo.existVertice(origin) && grafo.existVertice(destiny)){
                        grafo.newArista(origin, destiny, weight);
                        origin_input3.setText("");
                        destiny_input3.setText("");
                        weight_input3.setText("");
                        JOptionPane.showMessageDialog(null, "Ruta registrada exitosamente");
                    }else{
                        throw new IllegalArgumentException("Uno de los almacene que introdujo no existe");
                    }

                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Ingreso inválido, asegúrese de que todos los valores estén correctos");
                    origin_input3.setText("");
                    destiny_input3.setText("");
                    weight_input3.setText("");
                }
            }}else{
                JOptionPane.showMessageDialog(null, "No hay almacenes registrados, por favor lee el TXT antes de registrar un almacen");
            }
    }//GEN-LAST:event_insertarRutaActionPerformed

    private void save_txt_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_txt_buttonActionPerformed
       Grafo grafo = Global.getGrafo();
       
       String almacenes=grafo.saveproducts();
       String rutas=grafo.saveroute();
       String todo=almacenes+rutas;
       todo=todo.trim();
       
             try {
            if(getPath()!=null) {
            PrintWriter pw=new PrintWriter(getPath());
            pw.print(todo);
            pw.close();
            JOptionPane.showMessageDialog(null, "Guardado exitoso");}
            else{JOptionPane.showMessageDialog(null, "Error!! Primero debe cargar un archivo txt");}
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error!!!!!");
        } 
    }//GEN-LAST:event_save_txt_buttonActionPerformed

    private void Mostrar_grafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Mostrar_grafoActionPerformed

       
        Grafo grafo=Global.getGrafo();
        Funciones funciones=new Funciones();
        Graph graph = new SingleGraph("Almacenes");
 
        graph.setStrict(false);
        graph.setAutoCreate(true);
        
        String nombres_almacenes=funciones.nombres_almacenes(grafo);
        
        if(!nombres_almacenes.equals("")) {
            String[] nombres=nombres_almacenes.split(",");
            
            for (int i = 0; i < nombres.length; i++) {
                graph.addNode(nombres[i]);
            }
 
            for (Node node : graph) {
                node.setAttribute("ui.label", node.getId());
            }
            
            String rutas=grafo.saveroute();
            rutas=rutas.replace("Rutas;", "");
            rutas=rutas.trim();
            String[] route=rutas.split("\n");
            for (int i = 0; i < route.length; i++) {
                String[] info_ruta=route[i].split(",");
                
                graph.addEdge(info_ruta[0]+info_ruta[1],info_ruta[0],info_ruta[1],true).addAttribute("ui.label", info_ruta[2]);

            }
            
            String styleSheet = "node{"
                + "text-mode: normal; text-alignment: center;text-size: 30;"
                + "size: 35px; fill-mode: plain; fill-color: green;text-padding: 2;shape:circle;} "
                + ""
                + "edge {"
                + "shape: cubic-curve; arrow-shape:arrow; arrow-size: 10; "
                + "fill-mode: dyn-plain; fill-color: black; text-size: 25; text-alignment: under;}";
            
            
            System.setProperty("org.graphstream.ui.renderer",
                "org.graphstream.ui.j2dviewer.J2DGraphRenderer");
             graph.setAttribute("ui.stylesheet", styleSheet);
             
             
             Viewer view = graph.display();
             view.setCloseFramePolicy(Viewer.CloseFramePolicy.CLOSE_VIEWER);
             view.setCloseFramePolicy(Viewer.CloseFramePolicy.HIDE_ONLY);
             
        } else{JOptionPane.showMessageDialog(null, "No hay informacion cargada");}
        
        Parent.removeAll();
        Parent.add(ShowGrafo);
        Parent.repaint();
        Parent.revalidate();
        
        
    }//GEN-LAST:event_Mostrar_grafoActionPerformed

    private void reporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reporteActionPerformed
        Parent.removeAll();
        Parent.add(BFS_DFS);
        Parent.repaint();
        Parent.revalidate();    }//GEN-LAST:event_reporteActionPerformed

    private void BFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BFSActionPerformed
        Grafo grafo = Global.getGrafo();
        if (Global.getGrafo().getFirst()!=null){
        String entada = grafo.getFirst().getName();
        pantalla_BFS_DFS.setText(grafo.BFS(entada).printBFS_DFS());
        }else{
        JOptionPane.showMessageDialog(null, "No hay almacenes registrados, por favor lee el TXT antes realizar el reporte");}
    }//GEN-LAST:event_BFSActionPerformed

    private void DFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DFSActionPerformed
        Grafo grafo = Global.getGrafo();
        if (Global.getGrafo().getFirst()!=null){
        String entada = grafo.getFirst().getName();
        pantalla_BFS_DFS.setText(grafo.DFS(entada).printBFS_DFS());
        }else{
        JOptionPane.showMessageDialog(null, "No hay almacenes registrados, por favor lee el TXT antes realizar el reporte");}    }//GEN-LAST:event_DFSActionPerformed

    private void boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxActionPerformed

    }//GEN-LAST:event_boxActionPerformed

    private void Pedido_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pedido_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Pedido_inputActionPerformed

    private void PedirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PedirActionPerformed
       Grafo grafo = Global.getGrafo();
        if (grafo.getFirst()!=null) {
        if (Pedido_input.getText().isBlank()) {
           
           JOptionPane.showMessageDialog(null, "Error!! Ingrese un pedido");
    
       } else if (!Pedido_input.getText().contains(",")) {
            JOptionPane.showMessageDialog(null, "Error!! Ingrese el pedido correctamente");
            }

       else {
           try{
                 
                 Funciones funciones=new Funciones();
                String pedido=Pedido_input.getText();
                String almacen=box.getSelectedItem().toString();
                ProductList todosproductos=funciones.mostrar_disponible(grafo);
                String mostrar=todosproductos.mostrar();
                String[] productos=pedido.split("/");
                String[] nombre_produ;
                Almacen storage=grafo.getVertice(almacen);
                boolean exito=true;
                
                for (int i = 0; i <productos.length; i++) {
                   nombre_produ=productos[i].split(",");
                   Product producto=storage.getListaProductos().searchproduct(nombre_produ[0]) ;
                   if (todosproductos.searchproduct(nombre_produ[0])== null){
                       exito = false;
                   }
                   
                   else if (producto==null){
                        
                        
                      Almacen primero = grafo.ordenDijsktra(storage.getName()).getFirst().getSiguiente();
                      Product pProducto = grafo.getVertice(primero.getName()).getListaProductos().searchproduct(nombre_produ[0]);
                      
                       while (primero!= null){
                           if (pProducto != null){
                                if ( pProducto.getQuantity()>= Integer.parseInt(nombre_produ[1])){
                            // aqui tienes que poner lo de imprimir el grafo, la funcion que retorna el grafo es grafo.grafoDijsktra(primero.getName(),storage.getName()) y ya, exitos natalia
                            JOptionPane.showMessageDialog(null,"La ruta mas cercana para el producto "+ pProducto.getName()+"\n"+grafo.grafoDijsktra(primero.getName(),storage.getName()).printGrafo());
                            pProducto.setQuantity(pProducto.getQuantity() - Integer.parseInt(nombre_produ[1]) );
                            break;}}
                        primero = primero.getSiguiente();
                        if (primero != null){
                             pProducto = grafo.getVertice(primero.getName()).getListaProductos().searchproduct(nombre_produ[0]);

                        }
                       
                   }}  
                    else if(producto!=null && producto.getQuantity()>=1 && Integer.parseInt(nombre_produ[1])<=producto.getQuantity()) {
                       producto.setQuantity(producto.getQuantity()-Integer.parseInt(nombre_produ[1]));
                       exito=true;
                   }
                   else if(todosproductos.searchproduct(nombre_produ[0]).getQuantity()<Integer.parseInt(nombre_produ[1])) {
                       JOptionPane.showMessageDialog(null, "No hay stock suficiente para satisfacer el pedido de "+nombre_produ[0]+" "+"De ser posible se procesara el resto de su pedido");
                       exito=false;
                   }
                   
                   else if (Integer.parseInt(nombre_produ[1])>producto.getQuantity()){

                       int suma_pedido=producto.getQuantity();
                       int restante = Integer.parseInt(nombre_produ[1]) - suma_pedido;
                       producto.setQuantity(0);
                       Almacen primero = grafo.ordenDijsktra(storage.getName()).getFirst().getSiguiente();
                       Product pProducto = grafo.getVertice(primero.getName()).getListaProductos().searchproduct(nombre_produ[0]);
                       
                       while (primero!= null){
                           if (pProducto!= null){
                        if (pProducto != null && pProducto.getQuantity()>= restante){
                            // aqui tienes que poner lo de imprimir el grafo, la funcion que retorna el grafo es grafo.grafoDijsktra(primero.getName(),storage.getName()) y ya, exitos natalia
                            JOptionPane.showMessageDialog(null,"La ruta mas cercana para el producto "+ pProducto.getName()+"\n"+grafo.grafoDijsktra(primero.getName(),storage.getName()).printGrafo());
                            pProducto.setQuantity(pProducto.getQuantity() - restante);
                            break;}}
                        primero = primero.getSiguiente();    
                        if (primero != null){
                             pProducto = grafo.getVertice(primero.getName()).getListaProductos().searchproduct(nombre_produ[0]);
                        }
                       }

                      
                       //procede a buscar en otros almacenes 
                   } 
                   
                  
                   

                   

               }
                if(exito==true) {
               JOptionPane.showMessageDialog(null, "Pedido realizado con exito");
                
                }
                else {JOptionPane.showMessageDialog(null, "No fue posible procesar su pedido");}
               Pedido_input.setText("");
                Mostrar_Productos.setText(funciones.mostrar_disponible(grafo).mostrar());
           } 

        catch(Exception e) {JOptionPane.showMessageDialog(null, "Error!! Ingrese el pedido correctamente");}
        
       
       }
        } else {JOptionPane.showMessageDialog(null, "No hay almacenes registrados, por favor lee el TXT antes realizar el reporte"); }

       
    }//GEN-LAST:event_PedirActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Almacen;
    private javax.swing.JButton Añadir_stock;
    private javax.swing.JButton BFS;
    private javax.swing.JPanel BFS_DFS;
    private javax.swing.JButton Boton_pedidos;
    private javax.swing.JButton DFS;
    private javax.swing.JPanel Gestion_Stock;
    private javax.swing.JButton Gestion_stock;
    private javax.swing.JPanel Inicio;
    private javax.swing.JTextArea Mostrar_Productos;
    private javax.swing.JButton Mostrar_grafo;
    private javax.swing.JPanel Parent;
    private javax.swing.JTextField Pedido_input;
    private javax.swing.JPanel Pedidos;
    private javax.swing.JButton Pedir;
    private javax.swing.JPanel Route;
    private javax.swing.JPanel ShowGrafo;
    private javax.swing.JButton almacen;
    private javax.swing.JTextField almacen_input;
    private javax.swing.JTextField almacen_input2;
    private javax.swing.JComboBox<String> box;
    private javax.swing.JTextField destiny_input3;
    private javax.swing.JTextField entrada_input;
    private javax.swing.JButton insertAlmacen_button;
    private javax.swing.JButton insertarRuta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton load_txt_button;
    private javax.swing.JTextField object_input;
    private javax.swing.JTextField origin_input3;
    private javax.swing.JTextArea pantalla_BFS_DFS;
    private javax.swing.JTextField quantity_input;
    private javax.swing.JButton reporte;
    private javax.swing.JButton ruta;
    private javax.swing.JTextField salida_input;
    private javax.swing.JButton save_txt_button;
    private javax.swing.JTextField weight_input;
    private javax.swing.JTextField weight_input2;
    private javax.swing.JTextField weight_input3;
    // End of variables declaration//GEN-END:variables
}
